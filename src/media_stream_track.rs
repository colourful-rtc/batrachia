use super::base::*;
use anyhow::{anyhow, Result};
use libc::*;
use std::convert::*;

#[repr(C)]
pub struct I420Frame {
    width: u32,
    height: u32,

    data_y: *const u8,
    stride_y: u32,
    data_u: *const u8,
    stride_u: u32,
    data_v: *const u8,
    stride_v: u32,
}

impl I420Frame {
    pub fn new(width: usize, height: usize, buf: &[u8]) -> Self {
        let need_size = ((width * height) as f32 * 1.5) as usize;
        assert!(buf.len() >= need_size);

        let y_size = width * height;
        let u_size = width * height / 4;

        let data_y = buf[..y_size].as_ptr();
        let data_u = buf[y_size..y_size + u_size].as_ptr();
        let data_v = buf[y_size + u_size..].as_ptr();

        Self {
            width: width as u32,
            height: height as u32,
            data_y,
            stride_y: width as u32,
            data_u,
            stride_u: (width / 2) as u32,
            data_v,
            stride_v: (width / 2) as u32,
        }
    }
}

#[repr(i32)]
#[derive(Clone, Copy, Debug)]
pub enum RawMediaStreamTrackKind {
    Video,
    Audio,
}

#[repr(C)]
pub struct RawMediaStreamTrack {
    /// A Boolean whose value of true if the track is enabled,
    /// that is allowed to render the media source stream;
    /// or false if it is disabled, that is not rendering the media source stream
    /// but silence and blackness. If the track has been disconnected, this value
    /// can be changed but has no more effect.
    pub enabled: bool,
    /// Returns a string containing a unique identifier (GUID) for the track;
    /// it is generated by the browser.
    pub id: *const c_char,
    /// Returns a string set to "audio" if the track is an audio track and to
    /// "video", if it is a video track. It doesn't change if the track is
    /// disassociated from its source.
    pub kind: RawMediaStreamTrackKind,
    /// Returns a string containing a user agent-assigned label that identifies the
    /// track source, as in "internal microphone". The string may be left empty and
    /// is empty as long as no source has been connected. When the track is
    /// disassociated from its source, the label is not changed.
    pub label: *const c_char,
    /// Returns a Boolean value indicating whether the track is unable to provide
    /// media data due to a technical issue.
    pub muted: bool,
    /// Returns an enumerated value giving the status of the track.
    /// This will be one of the following values:
    ///
    /// "true" which indicates that an input is connected and does its best-effort
    /// in providing real-time data. In that case, the output of data can be
    /// switched on or off using the enabled attribute.
    ///
    /// "false" which indicates that the input is not giving any more data and will
    /// never provide new data.
    pub ready_state: bool,
    /// Returns a Boolean with a value of true if the track is sourced by a
    /// RTCPeerConnection, false otherwise.
    pub remote: bool,

    // video
    pub width: u32,
    pub height: u32,
    pub frame_rate: u16,
    pub video_track: *const c_void,
}

impl Drop for RawMediaStreamTrack {
    fn drop(&mut self) {
        free_cstring(self.id);
        free_cstring(self.label);
    }
}

#[link(name = "batrachiatc")]
extern "C" {
    fn media_stream_video_track_add_frame(
        track: *const RawMediaStreamTrack,
        frame: *const I420Frame,
    );

    fn create_media_stream_video_track(
        id: *const c_char,
        label: *const c_char,
        width: u32,
        height: u32,
        frame_rate: u16,
    ) -> *const RawMediaStreamTrack;
}

pub struct MediaStreamTrackDescription {
    pub id: String,
    pub label: String,
    pub width: u32,
    pub height: u32,
    pub frame_rate: u16,
}

/*
MediaStreamTrack

The MediaStreamTrack interface represents a single media track within a stream;
typically, these are audio or video tracks, but other track types may exist as
well.
*/
pub struct MediaStreamTrack {
    raw: *const RawMediaStreamTrack,
}

unsafe impl Send for MediaStreamTrack {}
unsafe impl Sync for MediaStreamTrack {}

impl From<&RawMediaStreamTrack> for MediaStreamTrack {
    fn from(value: &RawMediaStreamTrack) -> Self {
        Self {
            raw: value as *const RawMediaStreamTrack,
        }
    }
}

impl MediaStreamTrack {
    pub fn new(desc: &MediaStreamTrackDescription) -> Result<Self> {
        let raw = unsafe {
            create_media_stream_video_track(
                to_c_str(&desc.id)?,
                to_c_str(&desc.label)?,
                desc.width,
                desc.height,
                desc.frame_rate,
            )
        };

        if raw.is_null() {
            Err(anyhow!("create media stream video track failed!"))
        } else {
            Ok(Self { raw })
        }
    }

    pub fn add_frame(&self, frame: &I420Frame) {
        unsafe {
            media_stream_video_track_add_frame(self.raw, frame);
        }
    }

    pub fn get_raw(&self) -> *const RawMediaStreamTrack {
        self.raw
    }
}

impl Drop for MediaStreamTrack {
    fn drop(&mut self) {
        drop(self.raw);
    }
}
